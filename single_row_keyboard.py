# There is a special keyboard with all keys in a single row....
#... Given a string keyboard of length 26 indicating the layout of...
#...  the keyboard (indexed from 0 to 25). Initially, your finger is...
#...  at index 0. To type a character, you have to move your finger to...
#... the index of the desired character. The time taken to move your finger...
#... from index i to index j is |i - j|....
#...You want to type a string word. Write a function to calculate how...
#... much time it takes to type it with one finger.


class Solution:
    def calculateTime(self, keyboard: str, word: str) -> int:
        time = 0 #establish baseline value for time variable which is returned
        count = 0 # establish baseline value for count variable used to index word
        dk = dict([i for i in enumerate(keyboard)]) # generate a dictionary 
        	#... from the keyword variable with the index as the key and each...
        	#... letter as the values
        dkrev = {v:k for k,v in dk.items()} # reverse the key-value relationships...
        	#... to associate each letter with its index 
        time = time + abs(dkrev[word[count]] - 0) # increment time by difference ...
        	#... between zero and the first letter in word
        for i in (range(len(word)-1)):
            time += abs(dkrev[word[count+1]]-dkrev[word[count]]) # increment time ...
            	# ... between subsequent letters in word
            count += 1 #... increment count, which is used to index the letter in word
        return(time) 
